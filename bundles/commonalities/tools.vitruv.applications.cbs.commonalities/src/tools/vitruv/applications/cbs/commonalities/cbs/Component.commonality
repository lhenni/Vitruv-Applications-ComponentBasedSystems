import tools.vitruv.applications.cbs.commonalities.util.common.operators.attribute.FirstUpperOperator
import tools.vitruv.applications.cbs.commonalities.util.common.operators.attribute.PrefixOperator
import tools.vitruv.applications.cbs.commonalities.util.common.operators.condition.SuffixConditionOperator

import tools.vitruv.applications.cbs.commonalities.util.oo.operators.attribute.OOTypeReferencesOperator

import tools.vitruv.applications.cbs.commonalities.util.pcm.operators.attribute.PcmProvidedRolesOperator

concept ComponentBasedSystems

// Externally contained by ComponentBasedSystems:Repository.components
referenced commonality Component {

	// Externally contained by PCM:Repository.components__Repository
	with PCM:BasicComponent

	// TODO Add a no-args constructor right away? Required for required roles.
	// Contained by ObjectOrientedDesign:RepositoryPackage.subPackages
	with ObjectOrientedDesign:(
		Package called "ComponentPackage",
		Class called "ComponentClass"
	)
	whereat {
		ComponentClass in ComponentPackage.classes,
		ComponentClass.visibility = "PUBLIC",
		// Note: This condition cannot be enforced because it depends on the component's name. Instead an attribute
		// mapping takes care of setting the class name accordingly during participation instantiation.
		<- ComponentClass.name hasSuffix "Impl"
	}

	has name {
		= PCM:BasicComponent.entityName

		// TODO Possible conflict of these mappings. They need to be consistent, otherwise they cause a cycle.
		= prefix(ObjectOrientedDesign:ComponentClass.name, "Impl")
		= firstUpper(ObjectOrientedDesign:ComponentPackage.name)
	}

	has providedRoles {
		// TODO We do not react to changes of the interfaces provided by these ProvidedRoles currently.
		= pcmProvidedRoles(PCM:BasicComponent.providedRoles_InterfaceProvidingEntity, "ComponentBasedSystems")

		= ooTypeReferences(ObjectOrientedDesign:ComponentClass.implementedInterfaces, "ComponentBasedSystems")
	}

	// TODO requiredRoles

	// TODO SEFFs: Mapping to (empty) method with signature that matches the operation referenced by the SEFF
}
